use std::io::Write;

use crate::{gadget::Gadget, rop::RopElement};

pub struct CodeGen {
    file: Box<dyn Write>,
}

impl CodeGen {
    pub fn new(file: Box<dyn Write>) -> Self {
        CodeGen { file: file }
    }

    pub fn pwntool(&mut self, binary_name: &String, rop: &Vec<RopElement>) -> std::io::Result<()> {
        write!(self.file, "# Code generated by Rrop for python3\n")?;
        write!(self.file, "from pwn import *\n")?;
        write!(
            self.file,
            "OFFSET_SAVED_RIP=0 # To change with the offset your found\n\n"
        )?;

        write!(self.file, "payload = b\"\\x90\" * OFFSET_SAVED_RIP\n")?;
        for element in rop {
            write!(
                self.file,
                "payload += p64(0x{:x}) # {:?} {}\n",
                element.value(),
                element.kind(),
                element.gadget()
            )?;
        }

        write!(self.file, "\nio = process(\"./{}\")\n", binary_name)?;
        write!(self.file, "io.send(payload)\n")?;
        write!(self.file, "io.interactive()\n")
    }

    pub fn raw_gadgets(&mut self, gadgets: &Vec<Gadget>) -> std::io::Result<()> {
        for g in gadgets {
            write!(self.file, "{}\n", g)?;
        }

        Ok(())
    }

    pub fn raw_rop(&mut self, rop: &Vec<RopElement>) -> std::io::Result<()> {
        for e in rop {
            write!(self.file, "{}\n", e)?;
        }

        Ok(())
    }
}
